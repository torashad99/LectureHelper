WEBVTT

1
00:00:00.000 --> 00:00:02.060
you

2
00:00:07.010 --> 00:00:09.930
this lecture is about the tax retrieval

3
00:00:09.930 --> 00:00:11.870
problem

4
00:00:11.870 --> 00:00:14.850
this picture shows our overall plan for

5
00:00:14.850 --> 00:00:17.939
lectures in the last lecture we talked

6
00:00:17.939 --> 00:00:21.029
about the high level strategies for text

7
00:00:21.029 --> 00:00:23.789
access we talked about the push versus

8
00:00:23.789 --> 00:00:27.810
poor so trainings are the main tools for

9
00:00:27.810 --> 00:00:31.170
supporting the poor mould starting from

10
00:00:31.170 --> 00:00:33.270
this lecture we're going to talk about

11
00:00:33.270 --> 00:00:38.160
the how search engines work in detail so

12
00:00:38.160 --> 00:00:40.470
first it's about the tax retrieval

13
00:00:40.470 --> 00:00:43.560
problem we're going to talk about the

14
00:00:43.560 --> 00:00:46.320
three things in this lecture first we

15
00:00:46.320 --> 00:00:50.579
will define tax retrieval second we're

16
00:00:50.579 --> 00:00:52.530
going to make a comparison between tax

17
00:00:52.530 --> 00:00:55.680
retrieval and the related tasks database

18
00:00:55.680 --> 00:00:59.160
retrieval finally we're going to talk

19
00:00:59.160 --> 00:01:01.469
about the document selecting versus

20
00:01:01.469 --> 00:01:04.680
document ranking as two strategies for

21
00:01:04.680 --> 00:01:10.260
responding to a user's query so what is

22
00:01:10.260 --> 00:01:13.920
tax retrieval it should be a task that's

23
00:01:13.920 --> 00:01:16.320
familiar to most of us because we are

24
00:01:16.320 --> 00:01:19.979
using web search engines all the time so

25
00:01:19.979 --> 00:01:24.270
tax retrieval is basically a task where

26
00:01:24.270 --> 00:01:26.760
the system would respond to a user's

27
00:01:26.760 --> 00:01:30.000
query with relevant documents basically

28
00:01:30.000 --> 00:01:33.990
to support the query as one way to

29
00:01:33.990 --> 00:01:36.659
implement the poor mode of information

30
00:01:36.659 --> 00:01:40.500
access so the scenario is the following

31
00:01:40.500 --> 00:01:42.650
you have a collection of text documents

32
00:01:42.650 --> 00:01:45.330
these documents could be all the web

33
00:01:45.330 --> 00:01:48.180
pages on the web or all the literature

34
00:01:48.180 --> 00:01:51.750
articles in the digital library or maybe

35
00:01:51.750 --> 00:01:57.920
all the text files in your computer a

36
00:01:57.920 --> 00:02:01.770
user would typically give a query to the

37
00:02:01.770 --> 00:02:03.570
system to express the information need

38
00:02:03.570 --> 00:02:06.420
and then the system would return

39
00:02:06.420 --> 00:02:09.780
relevant documents to users relevant

40
00:02:09.780 --> 00:02:12.629
documents refer to those documents that

41
00:02:12.629 --> 00:02:15.930
are useful to the user who typing the

42
00:02:15.930 --> 00:02:18.100
now this task is often called

43
00:02:18.100 --> 00:02:21.580
information retrieval but literally

44
00:02:21.580 --> 00:02:23.440
information retrieval would broadly

45
00:02:23.440 --> 00:02:25.959
include the retrieval of other non

46
00:02:25.959 --> 00:02:28.180
textual information as well for example

47
00:02:28.180 --> 00:02:33.610
audio video etc it's worth noting that

48
00:02:33.610 --> 00:02:35.860
tax retrieval is at the core of

49
00:02:35.860 --> 00:02:38.080
information table in the sense that

50
00:02:38.080 --> 00:02:42.819
other media's such as video can be

51
00:02:42.819 --> 00:02:45.580
retrieved by exploiting the companion

52
00:02:45.580 --> 00:02:49.420
text data so for example current the

53
00:02:49.420 --> 00:02:52.810
image search engines actually match a

54
00:02:52.810 --> 00:02:55.750
user's query with the companion text

55
00:02:55.750 --> 00:03:01.390
data of the image this problem is also

56
00:03:01.390 --> 00:03:05.860
called as the search problem and the

57
00:03:05.860 --> 00:03:07.239
technology is often called a search

58
00:03:07.239 --> 00:03:11.890
technology industry if you have taken a

59
00:03:11.890 --> 00:03:15.340
course in databases and we use for the

60
00:03:15.340 --> 00:03:17.519
pause the lecture at this point and

61
00:03:17.519 --> 00:03:22.060
think about the differences between tax

62
00:03:22.060 --> 00:03:25.120
retrieval and database retrieval now

63
00:03:25.120 --> 00:03:28.590
these two tasks are similar in many ways

64
00:03:28.590 --> 00:03:32.970
but there are some important differences

65
00:03:32.970 --> 00:03:35.860
so spend a moment to think about the

66
00:03:35.860 --> 00:03:38.290
differences between the two think about

67
00:03:38.290 --> 00:03:41.019
the data and information managed by a

68
00:03:41.019 --> 00:03:44.200
search engine versus those that are many

69
00:03:44.200 --> 00:03:47.530
managed by a database system think about

70
00:03:47.530 --> 00:03:49.660
the difference between the queries that

71
00:03:49.660 --> 00:03:51.820
you typically specify for a database

72
00:03:51.820 --> 00:03:54.940
system versus the queries that are typed

73
00:03:54.940 --> 00:03:57.250
typing in by users on a search engine

74
00:03:57.250 --> 00:04:02.010
and then finally think about the insults

75
00:04:02.010 --> 00:04:06.030
what's the difference between the two

76
00:04:06.030 --> 00:04:08.650
okay so if we think about the

77
00:04:08.650 --> 00:04:10.480
information or data manager by the two

78
00:04:10.480 --> 00:04:14.620
systems we will see that in tax retrieve

79
00:04:14.620 --> 00:04:17.260
all the data is unstructured it's free

80
00:04:17.260 --> 00:04:20.140
tax but in the databases they are

81
00:04:20.140 --> 00:04:22.539
structured data where there is a clear

82
00:04:22.539 --> 00:04:25.419
define a schema to tell you this column

83
00:04:25.419 --> 00:04:26.160
is

84
00:04:26.160 --> 00:04:28.950
the names of people in that column is

85
00:04:28.950 --> 00:04:33.540
ages etc in instructor text it's not

86
00:04:33.540 --> 00:04:36.230
obvious what are the names of people

87
00:04:36.230 --> 00:04:41.700
mentioned in the text because of this

88
00:04:41.700 --> 00:04:44.460
difference we can also see that text

89
00:04:44.460 --> 00:04:46.140
information tends to be more ambiguous

90
00:04:46.140 --> 00:04:48.240
and we talked about that in the natural

91
00:04:48.240 --> 00:04:51.600
and processing lab chip whereas in

92
00:04:51.600 --> 00:04:54.210
databases the data tend to have where

93
00:04:54.210 --> 00:04:57.260
they find the semantics

94
00:04:57.260 --> 00:05:00.090
there is also important difference in

95
00:05:00.090 --> 00:05:02.910
the queries and this is partly due to

96
00:05:02.910 --> 00:05:04.740
the difference in the information or

97
00:05:04.740 --> 00:05:09.210
data so text queries tend to be

98
00:05:09.210 --> 00:05:10.220
ambiguous

99
00:05:10.220 --> 00:05:13.380
whereas in database search the queries

100
00:05:13.380 --> 00:05:16.620
are typically where defined think about

101
00:05:16.620 --> 00:05:18.450
the sequel query that would clearly

102
00:05:18.450 --> 00:05:22.350
specify what records to be returned so

103
00:05:22.350 --> 00:05:26.420
it has very well defined the semantics

104
00:05:26.420 --> 00:05:28.890
keyword queries or natural language

105
00:05:28.890 --> 00:05:32.610
queries tend to be incompleted also in

106
00:05:32.610 --> 00:05:35.550
that it doesn't really fully specify

107
00:05:35.550 --> 00:05:38.670
what Dawkins should be retrieve whereas

108
00:05:38.670 --> 00:05:41.400
in the database search the sequel query

109
00:05:41.400 --> 00:05:43.650
can be regarded as a complete a

110
00:05:43.650 --> 00:05:45.900
specification for what should be

111
00:05:45.900 --> 00:05:48.210
returned and because of these

112
00:05:48.210 --> 00:05:50.610
differences the answers would be also

113
00:05:50.610 --> 00:05:54.390
different in the case of text retrieval

114
00:05:54.390 --> 00:05:56.010
we are looking for rather than the

115
00:05:56.010 --> 00:06:00.570
documents in the database search we are

116
00:06:00.570 --> 00:06:04.220
retrieving records or match records with

117
00:06:04.220 --> 00:06:10.260
the sequel query more precisely now in

118
00:06:10.260 --> 00:06:12.540
the case of text reachable what should

119
00:06:12.540 --> 00:06:16.530
be the right answers to a query is not

120
00:06:16.530 --> 00:06:20.180
very well specified as we just discussed

121
00:06:20.180 --> 00:06:23.550
so it's unclear what should be the right

122
00:06:23.550 --> 00:06:26.670
answers to a query and this has very

123
00:06:26.670 --> 00:06:30.120
important consequences and that is tax

124
00:06:30.120 --> 00:06:33.680
retrieval is an empirically defined

125
00:06:33.680 --> 00:06:36.680
problem

126
00:06:38.030 --> 00:06:44.340
so this is a problem because if it's

127
00:06:44.340 --> 00:06:47.750
empirically defined then we cannot

128
00:06:47.750 --> 00:06:50.039
mathematically prove one method is

129
00:06:50.039 --> 00:06:52.979
better than another method that also

130
00:06:52.979 --> 00:06:55.410
means we must rely on empirical

131
00:06:55.410 --> 00:06:59.520
evaluation involving users to know which

132
00:06:59.520 --> 00:07:03.120
method works better and that's why we

133
00:07:03.120 --> 00:07:05.910
have unlocked you actually more than one

134
00:07:05.910 --> 00:07:08.370
lectures to cover the issue of

135
00:07:08.370 --> 00:07:10.590
evaluation because this is a very

136
00:07:10.590 --> 00:07:12.949
important topic for search engines

137
00:07:12.949 --> 00:07:16.560
without knowing how to evaluate an

138
00:07:16.560 --> 00:07:18.960
algorithm appropriately there is no way

139
00:07:18.960 --> 00:07:20.400
to tell whether we have got a better

140
00:07:20.400 --> 00:07:23.220
algorithm or whether one system is

141
00:07:23.220 --> 00:07:29.430
better than another so now let's look at

142
00:07:29.430 --> 00:07:31.340
the problem in a formal way

143
00:07:31.340 --> 00:07:34.080
so the society's use of formal

144
00:07:34.080 --> 00:07:36.620
formulation of the tax retrieval problem

145
00:07:36.620 --> 00:07:41.099
first we have our vocabulary set which

146
00:07:41.099 --> 00:07:44.940
is just a set of words in a language now

147
00:07:44.940 --> 00:07:47.699
here we are considering just one

148
00:07:47.699 --> 00:07:50.880
language but in reality on the web there

149
00:07:50.880 --> 00:07:53.430
might be multiple natural languages we

150
00:07:53.430 --> 00:07:55.560
have text there are in all kinds of

151
00:07:55.560 --> 00:07:58.949
languages but here for simplicity we

152
00:07:58.949 --> 00:08:00.750
just assume there is one kind of

153
00:08:00.750 --> 00:08:03.289
language as the techniques used for

154
00:08:03.289 --> 00:08:06.270
retrieving data from multiple languages

155
00:08:06.270 --> 00:08:09.870
are more or less similar to the

156
00:08:09.870 --> 00:08:11.789
techniques used for retrieving documents

157
00:08:11.789 --> 00:08:13.680
in one language although there is

158
00:08:13.680 --> 00:08:15.630
important difference the principles and

159
00:08:15.630 --> 00:08:22.469
methods are very similar next we have

160
00:08:22.469 --> 00:08:24.330
the query which is a sequence of words

161
00:08:24.330 --> 00:08:33.659
and so here you can see the query is

162
00:08:33.659 --> 00:08:37.079
defined as a sequence of words each Q

163
00:08:37.079 --> 00:08:41.810
sub I is a word in the vocabulary a

164
00:08:41.810 --> 00:08:44.790
document is defined in the same way so

165
00:08:44.790 --> 00:08:47.730
it's also a sequence of words and here T

166
00:08:47.730 --> 00:08:49.470
sub IJ

167
00:08:49.470 --> 00:08:52.830
is also a word in the vocabulary now

168
00:08:52.830 --> 00:08:54.960
typically the documents are much longer

169
00:08:54.960 --> 00:08:57.960
than queries but there are also cases

170
00:08:57.960 --> 00:09:04.410
where the documents may be very short so

171
00:09:04.410 --> 00:09:06.810
you can think about what might be an

172
00:09:06.810 --> 00:09:10.110
example of that case I hope you can

173
00:09:10.110 --> 00:09:13.980
think of Twitter search right tweets are

174
00:09:13.980 --> 00:09:18.180
very short but in general documents are

175
00:09:18.180 --> 00:09:24.330
longer than the queries now then we have

176
00:09:24.330 --> 00:09:29.580
a collection of documents and this

177
00:09:29.580 --> 00:09:31.560
collection can be very large so think

178
00:09:31.560 --> 00:09:35.270
about the web it could be very large and

179
00:09:35.270 --> 00:09:38.340
then the goal of tax retrieval is to

180
00:09:38.340 --> 00:09:41.370
find the set of relevant documents which

181
00:09:41.370 --> 00:09:44.820
we denote by R of Q because it depends

182
00:09:44.820 --> 00:09:47.910
on the query and this is in general a

183
00:09:47.910 --> 00:09:49.830
subset of all the documents in the

184
00:09:49.830 --> 00:09:54.600
collection unfortunately this set of

185
00:09:54.600 --> 00:09:57.830
relevant documents is generally unknown

186
00:09:57.830 --> 00:10:01.200
and user dependent in the sense that for

187
00:10:01.200 --> 00:10:04.490
the same query typing by different users

188
00:10:04.490 --> 00:10:07.440
the expected relevant documents may be

189
00:10:07.440 --> 00:10:11.280
different the query given to us by the

190
00:10:11.280 --> 00:10:14.520
user is only a hint on which document

191
00:10:14.520 --> 00:10:18.180
that should be in this set and indeed

192
00:10:18.180 --> 00:10:23.340
the user is generally unable to specify

193
00:10:23.340 --> 00:10:25.470
what exactly should be in this set

194
00:10:25.470 --> 00:10:27.240
especially in the case of web search

195
00:10:27.240 --> 00:10:29.880
where the tracking so large the user

196
00:10:29.880 --> 00:10:31.320
doesn't have complete knowledge about

197
00:10:31.320 --> 00:10:36.360
the whole fraction so the best search

198
00:10:36.360 --> 00:10:41.060
system can do is to compute an

199
00:10:41.060 --> 00:10:44.790
approximation of this relevant document

200
00:10:44.790 --> 00:10:50.460
set so we denoted by our prime of Q so

201
00:10:50.460 --> 00:10:52.230
formally we can see the task is to

202
00:10:52.230 --> 00:10:56.640
compute this R prime of Q approximation

203
00:10:56.640 --> 00:11:00.600
of the relevant documents so how can we

204
00:11:00.600 --> 00:11:01.210
do that

205
00:11:01.210 --> 00:11:05.050
now imagine if you are now asked to

206
00:11:05.050 --> 00:11:09.280
write a program to do this what would

207
00:11:09.280 --> 00:11:12.970
you do now think for a moment right so

208
00:11:12.970 --> 00:11:16.200
these are the your input with the query

209
00:11:16.200 --> 00:11:22.120
the documents and then you are the

210
00:11:22.120 --> 00:11:25.360
computer the answers to this query which

211
00:11:25.360 --> 00:11:27.190
is set of documents that would be useful

212
00:11:27.190 --> 00:11:30.610
to the user so how would you solve the

213
00:11:30.610 --> 00:11:36.220
problem now in general there are two

214
00:11:36.220 --> 00:11:39.760
strategies that we can use right the

215
00:11:39.760 --> 00:11:41.530
first two strategies without documents

216
00:11:41.530 --> 00:11:43.180
in action and that is we're going to

217
00:11:43.180 --> 00:11:46.060
have a binary classification function or

218
00:11:46.060 --> 00:11:50.320
binary classifier that's a function that

219
00:11:50.320 --> 00:11:52.990
would take a document and query as input

220
00:11:52.990 --> 00:11:57.400
and then give a 0 or 1 as output to

221
00:11:57.400 --> 00:11:59.320
indicate whether this document is

222
00:11:59.320 --> 00:12:02.560
relevant to the query or not so in this

223
00:12:02.560 --> 00:12:09.160
case you can see the document the the

224
00:12:09.160 --> 00:12:12.840
redmond locking in the set is defined as

225
00:12:12.840 --> 00:12:17.800
follows it basically all the documents

226
00:12:17.800 --> 00:12:23.790
that have a value of 1 by this function

227
00:12:23.790 --> 00:12:26.470
and so so in this case you can see the

228
00:12:26.470 --> 00:12:28.330
system must have decided if a document

229
00:12:28.330 --> 00:12:30.610
is relevant or not basically there has

230
00:12:30.610 --> 00:12:34.030
to say whether it's 1 or 0 and this is

231
00:12:34.030 --> 00:12:36.820
called absolute the remans basically it

232
00:12:36.820 --> 00:12:38.710
needs to know exactly whether it's going

233
00:12:38.710 --> 00:12:42.520
to be useful to the user or totally

234
00:12:42.520 --> 00:12:44.440
there's another strategy called document

235
00:12:44.440 --> 00:12:47.830
arranging now in this case the system is

236
00:12:47.830 --> 00:12:49.840
not going to make a call where the

237
00:12:49.840 --> 00:12:52.810
document is Renmin or not but rather the

238
00:12:52.810 --> 00:12:55.360
system is going to use a real variable

239
00:12:55.360 --> 00:12:59.410
function f here that would simply give

240
00:12:59.410 --> 00:13:02.710
us a value that would indicate which

241
00:13:02.710 --> 00:13:06.040
document is more likely relevant so it's

242
00:13:06.040 --> 00:13:07.480
not going to make a call whether this

243
00:13:07.480 --> 00:13:09.280
document is relevant or not but rather

244
00:13:09.280 --> 00:13:11.050
you would say which document is more

245
00:13:11.050 --> 00:13:13.840
likely relevant so this function then

246
00:13:13.840 --> 00:13:14.499
can be

247
00:13:14.499 --> 00:13:18.909
used to render the documents and then

248
00:13:18.909 --> 00:13:20.979
we're gonna let it use the decide where

249
00:13:20.979 --> 00:13:23.679
to stop when the user looks at the

250
00:13:23.679 --> 00:13:28.089
documents so we have a threshold theta

251
00:13:28.089 --> 00:13:32.919
here to determine what documents should

252
00:13:32.919 --> 00:13:37.659
be in this approximation set and we can

253
00:13:37.659 --> 00:13:39.549
assume that all the Rockies that are

254
00:13:39.549 --> 00:13:44.009
ranked above this ratio are in this set

255
00:13:44.009 --> 00:13:47.019
because in the fact these are the

256
00:13:47.019 --> 00:13:48.639
documents that we deliver to the user

257
00:13:48.639 --> 00:13:54.099
and theta is cut off terminal by the

258
00:13:54.099 --> 00:13:58.389
user so here we've got some

259
00:13:58.389 --> 00:14:00.159
collaboration from the user in some

260
00:14:00.159 --> 00:14:02.229
sense because we don't really make a

261
00:14:02.229 --> 00:14:04.989
cut-off and the user kind of helped the

262
00:14:04.989 --> 00:14:08.589
system make a cut-off so in this case

263
00:14:08.589 --> 00:14:11.169
the system only needs to decide if one

264
00:14:11.169 --> 00:14:13.149
document is more likely relevant than

265
00:14:13.149 --> 00:14:15.819
another and that is it only needs to

266
00:14:15.819 --> 00:14:19.419
determine relative relevance as opposed

267
00:14:19.419 --> 00:14:22.509
to absolute awareness now you can

268
00:14:22.509 --> 00:14:25.959
probably already sense that relevant

269
00:14:25.959 --> 00:14:29.259
relative relevance would be easier to

270
00:14:29.259 --> 00:14:31.599
determine the absolute relevance because

271
00:14:31.599 --> 00:14:34.209
in the first case we have to say exactly

272
00:14:34.209 --> 00:14:36.629
whether the document is relevant or not

273
00:14:36.629 --> 00:14:41.369
and it turns out that ranking is indeed

274
00:14:41.369 --> 00:14:45.009
generally preferred to talk in the

275
00:14:45.009 --> 00:14:48.279
selection so let's look at this these

276
00:14:48.279 --> 00:14:50.739
two strategies in more detail so this

277
00:14:50.739 --> 00:14:53.109
picture shows how it works

278
00:14:53.109 --> 00:14:56.769
so on the left side we see these

279
00:14:56.769 --> 00:15:00.699
documents and we use the process to

280
00:15:00.699 --> 00:15:02.829
indicate the relevant documents so we

281
00:15:02.829 --> 00:15:06.869
can see the true relevant documents here

282
00:15:06.869 --> 00:15:11.459
consists this set of sure our documents

283
00:15:11.459 --> 00:15:13.899
consist of these pluses

284
00:15:13.899 --> 00:15:19.869
these documents and with the popular

285
00:15:19.869 --> 00:15:24.309
selection function and we're going to

286
00:15:24.309 --> 00:15:26.859
basically classify them into two groups

287
00:15:26.859 --> 00:15:28.130
relevant lock

288
00:15:28.130 --> 00:15:30.860
and non-random the ones of course the

289
00:15:30.860 --> 00:15:33.230
classifier will not be perfect so it

290
00:15:33.230 --> 00:15:36.320
will make mistakes so here we can see in

291
00:15:36.320 --> 00:15:38.840
the approximation of the relevant

292
00:15:38.840 --> 00:15:41.090
documents we have got some non redundant

293
00:15:41.090 --> 00:15:44.120
documents and similarly there is a

294
00:15:44.120 --> 00:15:45.490
relevant document that that's

295
00:15:45.490 --> 00:15:49.250
misclassified has non relevant in the

296
00:15:49.250 --> 00:15:51.050
case of doctrine the ranking we can see

297
00:15:51.050 --> 00:15:55.160
the system simply simply ranks all the

298
00:15:55.160 --> 00:15:57.350
documents in the descending order of the

299
00:15:57.350 --> 00:16:01.130
scores and then we're gonna let the user

300
00:16:01.130 --> 00:16:04.460
stop wherever the user wants to stop so

301
00:16:04.460 --> 00:16:06.020
if a user wants to examine more

302
00:16:06.020 --> 00:16:08.630
documents then the user would go down

303
00:16:08.630 --> 00:16:10.940
the list to examine more and stop at a

304
00:16:10.940 --> 00:16:14.480
lower position but if the user only

305
00:16:14.480 --> 00:16:17.180
wants to read a few relevant documents

306
00:16:17.180 --> 00:16:19.850
the user might stop at the top position

307
00:16:19.850 --> 00:16:25.100
so in this case the user stops at t4 so

308
00:16:25.100 --> 00:16:28.460
in effect we have delivered these four

309
00:16:28.460 --> 00:16:34.520
documents to our user so as I said

310
00:16:34.520 --> 00:16:37.940
ranking is generally preferred and one

311
00:16:37.940 --> 00:16:42.290
of the reasons is because the classifier

312
00:16:42.290 --> 00:16:44.420
in the case of document selection is

313
00:16:44.420 --> 00:16:48.620
unlikely accurate why because the only

314
00:16:48.620 --> 00:16:52.580
crew is usually the query but query may

315
00:16:52.580 --> 00:16:54.860
not be accurate in the sense that it

316
00:16:54.860 --> 00:16:58.250
could be overly constrained for example

317
00:16:58.250 --> 00:17:00.710
you might expect the relevant documents

318
00:17:00.710 --> 00:17:05.600
to talk about all these topics you by

319
00:17:05.600 --> 00:17:08.360
using specific vocabulary and as a

320
00:17:08.360 --> 00:17:13.040
result you might match no relevant

321
00:17:13.040 --> 00:17:15.800
documents because in the collection no

322
00:17:15.800 --> 00:17:17.420
others have discussed with the topic

323
00:17:17.420 --> 00:17:20.750
using these vocabularies so in this case

324
00:17:20.750 --> 00:17:26.390
you will see there is this problem of no

325
00:17:26.390 --> 00:17:29.840
relevant documents to return in the case

326
00:17:29.840 --> 00:17:33.560
of over a constrained query on the other

327
00:17:33.560 --> 00:17:36.290
hand if the query is under constraint

328
00:17:36.290 --> 00:17:40.720
for example if the query does not

329
00:17:40.720 --> 00:17:42.250
have sufficient that this one dating

330
00:17:42.250 --> 00:17:44.620
world to find the relevant documents you

331
00:17:44.620 --> 00:17:46.929
may actually end up by having her over

332
00:17:46.929 --> 00:17:51.220
delivery and this is when you thought

333
00:17:51.220 --> 00:17:54.039
these words might be sufficient to help

334
00:17:54.039 --> 00:17:55.990
you find the relevant documents but it

335
00:17:55.990 --> 00:17:58.179
turns out that they are not sufficient

336
00:17:58.179 --> 00:18:01.570
and there are many distracting documents

337
00:18:01.570 --> 00:18:06.190
using similar words and so this is the

338
00:18:06.190 --> 00:18:09.220
case of all the delivery unfortunately

339
00:18:09.220 --> 00:18:11.470
it's very hard to find the right

340
00:18:11.470 --> 00:18:15.490
position between these two extremes why

341
00:18:15.490 --> 00:18:17.980
because when the user is looking for the

342
00:18:17.980 --> 00:18:20.020
information in general the user does not

343
00:18:20.020 --> 00:18:22.630
have a good knowledge about the name for

344
00:18:22.630 --> 00:18:25.299
missing that we found and in that case

345
00:18:25.299 --> 00:18:27.520
the user does not have a good knowledge

346
00:18:27.520 --> 00:18:31.659
about what vocabularies will be used in

347
00:18:31.659 --> 00:18:34.690
those rare documents so it's very hard

348
00:18:34.690 --> 00:18:39.190
for user to pre specify the right level

349
00:18:39.190 --> 00:18:45.820
of our constraints even if the

350
00:18:45.820 --> 00:18:49.000
classifier is accurate we also still

351
00:18:49.000 --> 00:18:51.400
want to rank these relevant documents

352
00:18:51.400 --> 00:18:54.340
because they are generally not equally

353
00:18:54.340 --> 00:18:57.789
relevant relevance is often a matter of

354
00:18:57.789 --> 00:18:58.590
degree

355
00:18:58.590 --> 00:19:03.760
so we must prioritize these documents

356
00:19:03.760 --> 00:19:07.270
for a user to examine and this note that

357
00:19:07.270 --> 00:19:11.340
this prioritization is very important

358
00:19:11.340 --> 00:19:14.440
because a user cannot digest all the

359
00:19:14.440 --> 00:19:18.039
contents and once the user generally

360
00:19:18.039 --> 00:19:19.620
would have to look at each document

361
00:19:19.620 --> 00:19:22.990
sequentially and therefore it would make

362
00:19:22.990 --> 00:19:25.450
sense to feed the users with the most

363
00:19:25.450 --> 00:19:30.370
relevant documents and that's what

364
00:19:30.370 --> 00:19:32.850
ranking is doing so for these reasons

365
00:19:32.850 --> 00:19:36.580
ranking is general prefer now this

366
00:19:36.580 --> 00:19:38.679
preference also has the theoretical

367
00:19:38.679 --> 00:19:40.330
justification and this is given by the

368
00:19:40.330 --> 00:19:44.590
probability ranking principle in the end

369
00:19:44.590 --> 00:19:47.530
of this lecture there is a reference for

370
00:19:47.530 --> 00:19:51.580
this this principle says returning a

371
00:19:51.580 --> 00:19:53.440
ranked list of documents in

372
00:19:53.440 --> 00:19:55.690
sending order of probability that the

373
00:19:55.690 --> 00:19:57.759
document is relevant to the query is the

374
00:19:57.759 --> 00:20:00.490
optimal strategy under the following two

375
00:20:00.490 --> 00:20:04.120
assumptions first the utility of a

376
00:20:04.120 --> 00:20:07.120
document to a user is independent of the

377
00:20:07.120 --> 00:20:11.529
utility of any other document second a

378
00:20:11.529 --> 00:20:13.600
user would be assumed that who browse

379
00:20:13.600 --> 00:20:17.590
the results sequentially now it's easy

380
00:20:17.590 --> 00:20:20.139
to understand why these two assumptions

381
00:20:20.139 --> 00:20:23.559
are needed in order to justify for the

382
00:20:23.559 --> 00:20:28.840
ranking strategy because if the

383
00:20:28.840 --> 00:20:31.269
documents are independent then we can

384
00:20:31.269 --> 00:20:33.240
evaluate the utility of each document

385
00:20:33.240 --> 00:20:37.210
separately and this would allow us to

386
00:20:37.210 --> 00:20:39.269
compute a score for each document

387
00:20:39.269 --> 00:20:41.259
independently and then we're going to

388
00:20:41.259 --> 00:20:43.240
rank these documents based on those

389
00:20:43.240 --> 00:20:47.590
scores the second assumption is to say

390
00:20:47.590 --> 00:20:49.570
that that the user would indeed a follow

391
00:20:49.570 --> 00:20:52.360
the ranked list if the user is not going

392
00:20:52.360 --> 00:20:54.159
to follow the ranked list is not going

393
00:20:54.159 --> 00:20:56.019
to examine the documents of sequentially

394
00:20:56.019 --> 00:20:58.960
then obviously the ordering would not be

395
00:20:58.960 --> 00:21:03.029
optimal so under these two assumptions

396
00:21:03.029 --> 00:21:06.490
we can theoretically justify the ranking

397
00:21:06.490 --> 00:21:10.539
strategy is in fact the best you could

398
00:21:10.539 --> 00:21:14.769
do now I've put one question here to

399
00:21:14.769 --> 00:21:18.730
these two assumptions hope now I suggest

400
00:21:18.730 --> 00:21:22.090
you to pause the lecture for a moment to

401
00:21:22.090 --> 00:21:24.840
think about these

402
00:21:27.360 --> 00:21:31.290
now can you think of some examples that

403
00:21:31.290 --> 00:21:37.520
would suggest these assumptions aren't

404
00:21:37.520 --> 00:21:40.670
necessarily true

405
00:21:43.690 --> 00:21:46.940
now if you think for a moment you may

406
00:21:46.940 --> 00:21:50.510
realize none of the assumptions is

407
00:21:50.510 --> 00:21:54.560
actually true for example in the case of

408
00:21:54.560 --> 00:21:57.200
independence assumption we might have

409
00:21:57.200 --> 00:21:59.930
identical documents that have similar

410
00:21:59.930 --> 00:22:02.630
content or exactly same content if you

411
00:22:02.630 --> 00:22:05.990
look at each of them alone each is

412
00:22:05.990 --> 00:22:09.470
Redmund but if the user has already seen

413
00:22:09.470 --> 00:22:12.950
one of them we assume it's generally not

414
00:22:12.950 --> 00:22:15.590
very useful for the user to see another

415
00:22:15.590 --> 00:22:18.100
similar or duplicated one

416
00:22:18.100 --> 00:22:21.440
so clearly the utility of the document

417
00:22:21.440 --> 00:22:24.920
is dependent on other documents that the

418
00:22:24.920 --> 00:22:28.970
user has seen in some other cases you

419
00:22:28.970 --> 00:22:31.790
might see a scenario where one document

420
00:22:31.790 --> 00:22:34.550
that may not be useful to the user but

421
00:22:34.550 --> 00:22:37.310
when three particular documents are put

422
00:22:37.310 --> 00:22:40.100
together they provide an answer to the

423
00:22:40.100 --> 00:22:43.040
users question so this is a collective

424
00:22:43.040 --> 00:22:46.130
relevance and that also suggests that

425
00:22:46.130 --> 00:22:49.490
the value of the document might depend

426
00:22:49.490 --> 00:22:54.140
on other documents sequential browsers

427
00:22:54.140 --> 00:22:56.660
in January would make sense if you have

428
00:22:56.660 --> 00:23:00.470
a ranked list there but even if you have

429
00:23:00.470 --> 00:23:03.800
a ranked list there is evidence showing

430
00:23:03.800 --> 00:23:07.570
that users don't always just go strictly

431
00:23:07.570 --> 00:23:09.830
sequentially through the entire list

432
00:23:09.830 --> 00:23:11.930
they sometimes would look at the bottom

433
00:23:11.930 --> 00:23:15.470
for example or skip some and if you

434
00:23:15.470 --> 00:23:16.730
think about the more complicated

435
00:23:16.730 --> 00:23:18.980
interface that we could possible and use

436
00:23:18.980 --> 00:23:22.190
like two dimensional interface where you

437
00:23:22.190 --> 00:23:24.830
can put additional information on the

438
00:23:24.830 --> 00:23:28.280
screen then Secunia browsing is a very

439
00:23:28.280 --> 00:23:32.900
restrictive assumption so the point here

440
00:23:32.900 --> 00:23:36.970
is that none of these assumptions is

441
00:23:36.970 --> 00:23:41.090
really true but lived on us the

442
00:23:41.090 --> 00:23:42.680
probability rendering principle

443
00:23:42.680 --> 00:23:46.210
established some solid foundation for

444
00:23:46.210 --> 00:23:50.390
ranking as a primary task for search

445
00:23:50.390 --> 00:23:52.370
engines and this has actually been the

446
00:23:52.370 --> 00:23:55.049
basis for a lot of research work

447
00:23:55.049 --> 00:23:57.389
information retrieval and many

448
00:23:57.389 --> 00:23:59.340
algorithms have been designed that based

449
00:23:59.340 --> 00:24:00.950
on this assumption

450
00:24:00.950 --> 00:24:04.649
despite that the assumptions are

451
00:24:04.649 --> 00:24:08.669
necessary to and we can address this

452
00:24:08.669 --> 00:24:11.820
problem by doing post-processing of a

453
00:24:11.820 --> 00:24:14.460
ranked list for example to remove

454
00:24:14.460 --> 00:24:21.899
redundancy so to summarize this lecture

455
00:24:21.899 --> 00:24:26.789
the main points that you can take away

456
00:24:26.789 --> 00:24:29.220
are the following first Tex retrieval is

457
00:24:29.220 --> 00:24:31.980
an empirical define the problem and that

458
00:24:31.980 --> 00:24:35.100
means which algorithm is better must be

459
00:24:35.100 --> 00:24:39.779
judged by the users second document

460
00:24:39.779 --> 00:24:42.749
ranking is generally preferred and this

461
00:24:42.749 --> 00:24:45.179
will help users prioritize examination

462
00:24:45.179 --> 00:24:48.149
of search without and this is also the

463
00:24:48.149 --> 00:24:50.220
bypass the difficulty in determining

464
00:24:50.220 --> 00:24:53.549
absolute relevance because we can get

465
00:24:53.549 --> 00:24:56.340
some help from users in determining

466
00:24:56.340 --> 00:24:59.100
where to make the cutoff it's more

467
00:24:59.100 --> 00:25:03.539
flexible so this further suggests that

468
00:25:03.539 --> 00:25:05.759
the main technical channeling in

469
00:25:05.759 --> 00:25:07.830
designing and so changing is redesigned

470
00:25:07.830 --> 00:25:11.129
effective ranking function in other

471
00:25:11.129 --> 00:25:13.590
words we need to define what is the

472
00:25:13.590 --> 00:25:17.909
value of this function f on the query

473
00:25:17.909 --> 00:25:22.259
and documented pair a holo design such a

474
00:25:22.259 --> 00:25:24.929
function is the main topic in the

475
00:25:24.929 --> 00:25:30.299
following lectures there are two suggest

476
00:25:30.299 --> 00:25:32.580
to the additional readings the first is

477
00:25:32.580 --> 00:25:35.669
the classic paper on probability ranking

478
00:25:35.669 --> 00:25:39.330
principle the second is a must read for

479
00:25:39.330 --> 00:25:42.119
anyone doing research information table

480
00:25:42.119 --> 00:25:45.779
it's a classical IR book which has

481
00:25:45.779 --> 00:25:48.960
excellent coverage of the main research

482
00:25:48.960 --> 00:25:53.220
results in early days up to the time

483
00:25:53.220 --> 00:25:56.279
when the book was written chapter 6 of

484
00:25:56.279 --> 00:25:58.950
this book has in-depth discussion of the

485
00:25:58.950 --> 00:26:00.570
problem in the ranking principle and

486
00:26:00.570 --> 00:26:02.999
probabilistic of retrieval models in

487
00:26:02.999 --> 00:26:05.240
general